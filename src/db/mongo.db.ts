import { Collection, Db, MongoClient } from 'mongodb';
import { Blog } from '../blogs/types/blog';
import { Post } from '../posts/types/post';
import { SETTINGS } from '../core/settings/settings';

const BLOG_COLLECTION_NAME = 'blogs';
const POST_COLLECTION_NAME = 'posts';

export let client: MongoClient;
export let blogCollection: Collection<Blog>;
export let postCollection: Collection<Post>;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–¥
export async function runDB(url: string): Promise<void> {
    console.log('üîó Connecting to database:', url);
    client = new MongoClient(url);


    try {
        await client.connect(); // –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ü–ï–†–í–´–ú!
        console.log('‚úÖ MongoDB client connected');

        const db: Db = client.db(SETTINGS.DB_NAME);
        console.log('‚úÖ Database instance created:', SETTINGS.DB_NAME);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
        blogCollection = db.collection<Blog>(BLOG_COLLECTION_NAME);
        postCollection = db.collection<Post>(POST_COLLECTION_NAME);

        console.log('‚úÖ Collections initialized:', {
            drivers: !!blogCollection,
            rides: !!postCollection
        });

        await db.command({ ping: 1 });
        console.log('‚úÖ Database ping successful');
        console.log('‚úÖ Connected to the database');
    } catch (e) {
        console.error('‚ùå Database connection error:', e);
        await client.close();
        throw new Error(`‚ùå Database not connected: ${e}`);
    }
}

// –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export async function stopDb() {
    if (!client) {
        console.error('‚ùå No active client to stop');
        throw new Error(`‚ùå No active client`);
    }
    await client.close();
    console.log('‚úÖ Database connection closed');
}